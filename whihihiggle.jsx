// whihihiggle.jsx// this script adds a wiggle expression to the selected properties.// Copyright (c)  2012 // Fabian "fabiantheblind" Morón Zirfas  // http://fabiantheblind.info// Permission is hereby granted, free of charge, to any // person obtaining a copy of this software and associated// documentation files (the "Software"), to deal in the Software// without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense,// and/or sell copies of the Software, and to  permit persons to // whom the Software is furnished to do so, subject to // the following conditions:  // The above copyright notice and this permission notice// shall be included in all copies or substantial portions of the Software.  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  CONTRACT,// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTIO// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  // see also http://www.opensource.org/licenses/mit-license.php{var website = "http://fabiantheblind.info";meta = {        "freq"                  : 1,     "amp"                   : 25,    "seed"                  : 100,    "octaves"               : 1,        "amp_mult"              : 0.5,    "t"                     : 1,    "time_expr"             : "time",    "default_time_expr"     : "time",    "framesPerSecond"       : 1,    "loopTime"              : 5 ,    "ctrlname"              : "whihihiggle_ctrl",    "defaultctrlname"       : "whihihiggle_ctrl",    "ctrllayer"             : null,    "ctrlExists"            : false,    "addSeedRandom"         : true,    "addPosterizeTime"      : false,    "addLoop"               : false,    "addTemporal"           : false,     "addTime"               : true,     "simple"                : true,    "amp_is_expr"           : false,    "simple_amp_expr"       : "",    "freq_is_expr"          : false,    "simple_freq_expr"      : "",    "debug"                 : true,    "theWebsite"            : website,    "settingsSectionName"   :"whihihigglescript"    };uiStrings  = {    "theWebsite": website,    "theglobalscriptname": "whihihiggle"};errorStrings = {    "NAN" : "Sorry. This is not a number.\nI will reset the value to:\n",    "novalue": "You have to enter a value. I will reset to the last known value of:\n"};run_scipt(this,meta);function run_scipt(thisObj, meta){/** * First we have to do some legal stuff * go to the end of the script to se the dialog * */var res = null;var settingsSectionName = "whihihigglescript";if((app.settings.haveSetting(settingsSectionName,"licaccept") == true)){var licres = parseInt(app.settings.getSetting(settingsSectionName,"licaccept"));if (licres==1){    res = [true,true];} else {    res = licenseDiag(uiStrings.theglobalscriptname);    };}else{  res = licenseDiag(uiStrings.theglobalscriptname);};if (!res[1]){    return;}if(res[0]){    app.settings.saveSetting(settingsSectionName,"licaccept",1);};///   THIS WILL CHECK IF PANEL IS DOCKABLE OR FLAOTING WINDOW     var win   = buildUI(thisObj);   if ((win != null) && (win instanceof Window)) {      win.center();      win.show();      }; // end if win  null and not a instance of window };function buildUI (thisObj) {  // basic_ui.jsxvar win = (thisObj instanceof Panel)  ? thisObj : new Window('palette', 'whihihiggle',[0,0,260,100],{resizeable: true}); if (win != null) { // get the frequence and amplitude for quicker usage if(app.settings.haveSetting(meta.settingsSectionName,"freq")== true){    var freqsetting = app.settings.getSetting(meta.settingsSectionName,"freq");    if(isNaN(parseFloat(freqsetting)) == true){        meta.freq_is_expr = true;        meta.simple_freq_expr = freqsetting;         }else{        meta.freq_is_expr = false;        meta.freq = parseFloat(freqsetting);    };     };if(app.settings.haveSetting(meta.settingsSectionName,"amp")== true){    var ampsetting = app.settings.getSetting(meta.settingsSectionName,"amp");    // if(isNaN(parseFloat(ampsetting)) == true){        // meta.amp_is_expr = true;        // meta.simple_amp_expr = ampsetting;         // }else{        // meta.amp_is_expr = false;        meta.amp = ampsetting;    // };     };var advancedpanelsize = [10,95,250,300];win.button_run_main_script = win.add('button', [10,5,250,35], 'Add Whihihiggle!'); win.checkbox_simple = win.add('checkbox',  [ 10, 40,100, 60], 'simple?');win.checkbox_usetemporal = win.add('checkbox',  [ 10, 65,100, 85], 'temporal?');win.label_freq = win.add('statictext', [110,42,184,60], 'freq -------------'); win.label_amp = win.add('statictext', [110,72,184,90], 'amp -------------'); win.field_freq = win.add('edittext', [190,40,250,60], String(meta.freq)); win.field_amp = win.add('edittext', [190,70,250,90], String(meta.amp)); win.panel_advanced = win.add('group',advancedpanelsize , '');win.label_octaves = win.panel_advanced.add('statictext', [10,5,180,25], 'octaves ------------------------'); win.field_octaves = win.panel_advanced.add('edittext', [180,5,240,25], String(meta.octaves)); win.label_amp_mult = win.panel_advanced.add('statictext', [10,35,180,55], 'amp_mult ------------------------'); win.field_amp_mult = win.panel_advanced.add('edittext', [180,35,240,55], String(meta.amp_mult)); win.checkbox_addtime = win.panel_advanced.add('checkbox',  [ 10, 65,180, 85], 'add time expression -------');win.field_time = win.panel_advanced.add('edittext', [180,65,240,85], meta.time_expr); win.checkbox_addseed = win.panel_advanced.add('checkbox',  [ 10, 95,180, 115], 'add random seed ---------');win.field_seed = win.panel_advanced.add('edittext', [180,95,240,115], String(meta.seed)); win.checkbox_addpstrz = win.panel_advanced.add('checkbox',  [ 10, 125,180, 145], 'posterize time with fps ----');win.field_pstrz_fps = win.panel_advanced.add('edittext', [180,125,240,145], String(meta.framesPerSecond)); win.checkbox_addloop = win.panel_advanced.add('checkbox',  [ 10, 155,180, 175], 'loop wiggle in seconds ----');win.field_looptime = win.panel_advanced.add('edittext', [180,155,240,175], String(meta.loopTime));win.field_ctrlname = win.panel_advanced.add('edittext',[110,185,200,205], meta.ctrlname );win.button_select_ctrl = win.panel_advanced.add('button',[10, 185,105,205],'select controller');win.checkbox_ctrlExists = win.panel_advanced.add('checkbox',[210,185,240,205],'');win.label_freq.justify = 'left'; win.label_amp.justify = 'left'; win.label_octaves.justify = 'left'; win.label_amp_mult.justify = 'left';  win.checkbox_simple.value =  meta.simple;win.checkbox_addloop.value = meta.addLoop;win.checkbox_addpstrz.value = meta.addPosterizeTime;win.checkbox_addseed.value = meta.addSeedRandom;win.checkbox_addtime.value = meta.addTime;win.checkbox_usetemporal.value = meta.addTemporal;win.checkbox_ctrlExists.value = meta.ctrlExists;win.panel_advanced.visible = false;win.panel_advanced.enabled = false;    win.field_freq.justify = 'left'; win.field_amp.justify = 'left'; win.field_octaves.justify = 'left'; win.field_seed.justify = 'left'; win.field_time.justify = 'left'; win.field_amp_mult.justify = 'left'; win.field_looptime.justify = 'left'; win.field_pstrz_fps.justify = 'left'; win.field_ctrlname.justify = 'left';// ------------ the edit text fields ------------win.field_freq.onChange  = function (){    // if it is the complex exprerssion it only takes floats    if(meta.simple == false){        meta.freq = resetValIfNAN( parseFloat(this.text), meta.freq, errorStrings.NAN + " " + meta.freq);        this.text = meta.freq;        app.settings.saveSetting(meta.settingsSectionName,"freq",String(meta.freq));    // the simple expression takes also expressions as values    // this is tricky     }else if (meta.simple == true){        if(isNaN(parseFloat(this.text)) == true){            if(this.text.length > 0){            alert("I will use this as an expression.\nIf this is not what you wanted please reenter your value");            meta.simple_freq_expr = this.text;            meta.freq_is_expr = true;             app.settings.saveSetting(meta.settingsSectionName,"freq", meta.simple_freq_expr);            //  app.settings.saveSetting(meta.settingsSectionName,"freq",String(meta.simple_freq_expr));            }            // else{            //     alert("you have to enter something");            //     meta.freq_is_expr = false;            //     this.text = meta.freq;            // };            else{            meta.freq_is_expr = false;            meta.freq = resetValIfNAN(parseFloat(this.text), meta.freq, errorStrings.NAN + " " + meta.freq);            this.text = meta.freq;            };        }else if(isNaN(parseFloat(this.text))== false){            meta.freq = parseFloat(this.text);            meta.freq_is_expr = false;           app.settings.saveSetting(meta.settingsSectionName,"freq",String(meta.freq));        };    };};/** *   * */ win.field_amp.onChange  = function (){    // if it is the complex exprerssion it only takes floats    if(meta.simple == false){        meta.amp = resetValIfNAN( parseFloat(this.text), meta.amp, errorStrings.NAN + " " + meta.amp);        this.text = meta.amp;        app.settings.saveSetting(meta.settingsSectionName,"amp",String(meta.amp));    // the simple expression takes also expressions as values    // this is tricky     }else if (meta.simple == true){        // if(isNaN(parseFloat(this.text)) == true){            // if(this.text.length > 0){            // alert("I will use this as an expression.\nIf this is not what you wanted please reenter your value");            // meta.simple_amp_expr = this.text;            // meta.amp_is_expr = true;            if(this.text.length < 1){                this.text = meta.amp;                alert(errorStrings.novalue + meta.amp);            }else{                        meta.amp = this.text;//resetValIfNAN(parseFloat(this.text), meta.amp, errorStrings.NAN + " " + meta.amp);            app.settings.saveSetting(meta.settingsSectionName,"amp",meta.amp);            };                        // app.settings.saveSetting(meta.settingsSectionName,"amp",String(meta.simple_amp_expr));        // }else{            // meta.amp_is_expr = false;            // this.text = meta.amp;            // };        // }else if(isNaN(parseFloat(this.text))== false){        //     meta.amp = parseFloat(this.text);        //     meta.amp_is_expr = false;        //     app.settings.saveSetting(meta.settingsSectionName,"amp",String(meta.amp));        // };    };};win.field_octaves.onChange = function  () {            meta.octaves = resetValIfNAN( parseFloat(this.text), meta.octaves, errorStrings.NAN + " " + meta.octaves);        this.text = meta.octaves;};win.field_amp_mult.onChange = function  () {        meta.amp_mult = resetValIfNAN( parseFloat(this.text), meta.amp_mult, errorStrings.NAN + " " + meta.amp_mult);        this.text = meta.amp_mult;};win.field_seed.onChange = function  () {            meta.seed = resetValIfNAN( parseFloat(this.text), meta.seed, errorStrings.NAN + " " + meta.seed);        this.text = meta.seed;};win.field_looptime.onChange = function  () {        meta.loopTime = resetValIfNAN( parseFloat(this.text), meta.loopTime, errorStrings.NAN + " " + meta.loopTime);        this.text = meta.loopTime;};win.field_time.onChange = function(){        if(meta.addTime == true){            meta.time_expr = this.text;        }else if (meta.addTime == false) {            meta.t = resetValIfNAN(parseFloat(this.text),meta.t,errorStrings.NAN + " "+ meta.t);        };    };win.field_ctrlname.onChange = function(){        if(this.text.length > 0){            meta.ctrlname = this.text;        }else{            alert("Your controler needs a name.\nI will reset it to the last entry'"+meta.ctrlname+"'");            this.text = meta.ctrlname;        };    };// ----------------------------------------------win.button_run_main_script.onClick = function () {    if(meta.debug == true) alert(meta.toSource());    main_script(meta);};win.button_select_ctrl.onClick = function () {    var curComp = app.project.activeItem;    if (!curComp || !(curComp instanceof CompItem))    {        alert("Please select a Composition.");        return;    };    if (curComp.selectedLayers.length < 1) {        alert("Please select a control layer");        return;    };    var ctrllayer = curComp.selectedLayers[0];    if(ctrllayer == null){        alert("There is an error with your controller.\n Please try again");        return;    };    // taken from redefinerys scripting fundamentals    // http://www.redefinery.com/ae/fundamentals/layers/    // where would i be without it?    // Checking for a light layer (as of After Effects 7.0)if (ctrllayer instanceof LightLayer){    alert("Sorry buddy - this is a light layer.\nLight layers cant hold a expression controller");    return;    };// Checking for a camera layer (as of After Effects 7.0)if (ctrllayer instanceof CameraLayer){        alert("Sorry buddy - this is a camera layer.\camera layers cant hold a expression controller");    return;    };    // ------------ finally we can check for the controlers ------------    meta.ctrllayer = ctrllayer;    meta.ctrlname = ctrllayer.name;    win.field_ctrlname.text = meta.ctrlname;    meta.ctrlExists = true;    win.checkbox_ctrlExists.value = meta.ctrlExists;};win.checkbox_simple.onClick = function (){    if(this.value == true){            win.panel_advanced.visible = false;    win.panel_advanced.enabled = false;    win.bounds = [0,0,260,100];        }else if (this.value == false){    win.field_amp.notify();    win.field_freq.notify();    win.panel_advanced.visible = true;    win.panel_advanced.enabled = true;    win.bounds = [0,0,260,315];            };    meta.simple = this.value;    };// end of simple checkbox functionwin.checkbox_addloop.onClick = function(){     meta.addLoop = this.value; };win.checkbox_addpstrz.onClick = function(){     meta.addPosterizeTime = this.value; };win.checkbox_usetemporal.onClick = function(){     meta.addTemporal = this.value; };win.checkbox_addseed.onClick = function(){     meta.addSeedRandom = this.value; };win.checkbox_addtime.onClick = function(){        if(this.value == true){            win.field_time.text = meta.time_expr;            meta.addTime = this.value;        }else if(this.value == false){            win.field_time.text = meta.t;            meta.addTime = this.value;        };};win.checkbox_ctrlExists.onClick = function() {    meta.ctrlExists = this.value;    if(this.value == false){        meta.ctrllayer = null;        meta.ctrlname = meta.defaultctrlname;    };};} return win    }; // end of build UIfunction licenseDiag (n) {    var lic= "DONT USE SCRIPTS FROM UNTRUSETED SOURCES! ALWAYS DOWNLOAD THIS SCRIPT @ AESCRIPTS.COM http://aescripts.com/aemap/\n\n"+    "You have to allow the script to read and write to disk.\nso if you obtained this script from any other source then the above mentioned"+"\nIT COULD INCLUDE MALICIOUS CODE!\nBy confirming this dialog you also accept the license agreement below\n"+    "\nLICENSES\n"+"countries.geo.json and countries.zip and all its contents are UNLICENSED.\nSee also http://unlicense.org\n\n"+"Copyright (c)  2012 Fabian \"fabiantheblind\" Morón Zirfas\n"+"Permission is hereby granted, free of charge*, to any person obtaining a copy of this "+"software and associated documentation files (the \"Software\"), to deal in the Software "+ "without restriction, including without limitation the rights to use, copy, modify "+ "the Software, and to permit persons to whom the Software is furnished to do so, subject to the following "+"conditions:\n"+"The above copyright notice and this permission notice shall be included in all copies "+ "or substantial portions of the Software.\n"+"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, "+ "INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A "+ "PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT "+ "HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF "+ "CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE "+"OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"+"see also http://www.opensource.org/licenses/mit-license.php\n\n"+"*if you want to donate something so I can buy cookies and beer\ndo it via aescripts.com\n";var diag                = new Window ("dialog",n + " || readme and license agreement");    diag.preferredSize  =    {"width":450,"height":450};var pan                 = diag.add('group',undefined,'');    pan.orientation     ='column';var txt                 = pan.add('edittext',undefined,lic,{multiline:true,scrolling: false});    txt.preferredSize   =    {"width":440,"height":430};var btg                 =  pan.add ("group");var cbg                 = btg.add ("group");    cbg.alignment       = "left";var cb                  = cbg.add ("checkbox", undefined, "dont warn me again");    btg.orientation     = 'row';    btg.alignment       = "right";    btg.add ("button", undefined, "OK");    btg.add ("button", undefined, "cancel");if (diag.show () == 1){    return [cb.value,true];  }else{      return [false, false];  };};function resetValIfNAN(val, resetVal, theErrorMessage){      if(isNaN(val) == true){    val = resetVal;    alert(theErrorMessage);    };  return val;};function main_script(meta){app.beginUndoGroup("whihihiggle");    var curComp = app.project.activeItem;    if (!curComp || !(curComp instanceof CompItem))    {        alert("Please select a Composition.");        return;    };    var theExpression = buildExpression(meta);    var props = new Array(); app.beginSuppressDialogs();// dont want any warnings    var myLayers = curComp.selectedLayers;    if(myLayers.length > 0){        for (var i = 0; i < myLayers.length; i++){            var lprops = myLayers[i].selectedProperties;        for(var j = 0; j < lprops.length; j++){            props.push(lprops[j]);          };        };if((!meta.ctrlExists)&&(meta.simple == false)) createController(curComp, meta);for (var i = props.length - 1; i >= 0; i--) {  p = props[i];              if(p.canSetExpression == true){                try{                p.expression = theExpression.join("\n");                p.expressionEnabled = true;                }catch(e){                p.expressionEnabled = false;                alert("There is an error in your expression.\nI will disable it. Sry mate.");                };            };}; app.endSuppressDialogs(false);}else{            alert("Please select at least one layer.");    return;    };// alert("reomved "+theLayers.length+" effects from selection");app.endUndoGroup();}function buildExpression (meta) {var theExpression = new Array();if(meta.simple ==false){theExpression.push("layer = thisComp.layer('"+ meta.ctrlname +"'); // <-- THE CONTROL LAYER");theExpression.push("\n/* ------------------------------- */\n");theExpression.push("\n/* -----THE SLIDER CONTROLS------- */\n");theExpression.push("freq = layer.effect('freq')('ADBE Slider Control-0001');");theExpression.push("amp = layer.effect('amp')('ADBE Slider Control-0001');");theExpression.push("seed = layer.effect('seed')('ADBE Slider Control-0001');");theExpression.push("octaves = layer.effect('octaves')('ADBE Slider Control-0001');");theExpression.push("amp_mult = layer.effect('amp_mult')('ADBE Slider Control-0001');");theExpression.push("t = layer.effect('t')('ADBE Slider Control-0001');");theExpression.push("framesPerSecond = layer.effect('framesPerSecond')('ADBE Slider Control-0001');");theExpression.push("loopTime = layer.effect('loopTime')('ADBE Slider Control-0001');\n");theExpression.push("\n/* ------------------------------- */\n");var seed = "// seedRandom(seed);\r";if(meta.addSeedRandom){    seed = seed.substring(3);};theExpression.push(seed);var posterize = "// posterizeTime(framesPerSecond);\n";if((meta.addPosterizeTime == true)&&(meta.addLoop == false)){    posterize = posterize.substring(3);};theExpression.push(posterize);var theWiggle = "";var theTemporalWiggle = "";if(meta.addPosterizeTime == true){        theTemporalWiggle = "// temporalWiggle(freq, amp,octaves, amp_mult);\n";         theWiggle = "// wiggle(freq,amp,octaves, amp_mult)\n";      }else if(meta.addPosterizeTime == false){        theWiggle = "// wiggle(freq,amp,octaves,amp_mult,t)\n";        theTemporalWiggle = "// temporalWiggle(freq, amp, octaves, amp_mult, t);\n";};if(meta.addLoop == false){    if(meta.addTemporal == true){        theTemporalWiggle = theTemporalWiggle.substring(3);    }else if(meta.addTemporal == false){        theWiggle = theWiggle.substring(3);    };};theExpression.push(theWiggle);theExpression.push(theTemporalWiggle);theExpression.push("\n/* ------------------------------- */\n");theExpression.push("// Thanx to Dan Ebberst");theExpression.push("// Expressionieer's Designer Guide");theExpression.push("// Loop wiggle()");theExpression.push("// http://www.motionscript.com/design-guide/looping-wiggle.html\n");var loop_l1 = "// tLooped = t % loopTime;";var loop_l2 = "// wiggle1 = wiggle(freq, amp, octaves, amp_mult, tLooped);";var loop_l3 = "// wiggle2 = wiggle(freq, amp, octaves, amp_mult, tLooped - loopTime);";var loop_l4 = "// linear(tLooped, 0,  loopTime, wiggle1, wiggle2)";if (meta.addLoop == true) {    loop_l1 = loop_l1.substring(3);    loop_l2 = loop_l2.substring(3);    loop_l3 = loop_l3.substring(3);    loop_l4 = loop_l4.substring(3);};theExpression.push(loop_l1);theExpression.push(loop_l2);theExpression.push(loop_l3);theExpression.push(loop_l4);theExpression.push("\n/* ------------------------------- */\n");theExpression.push("// created with whihihiggle script by fabiantheblind\n// checkout --> " + meta.theWebsite +"\n\n");}else{    var f = meta.freq;    var a = meta.amp;    if(meta.freq_is_expr == true){        f = meta.simple_freq_expr;     };    // if(meta.amp_is_expr == true){    //     a = meta.simple_amp_expr;    // };    if(meta.addTemporal == false){        theExpression.push("wiggle("+f+","+a+")");    }else if(meta.addTemporal == true){        theExpression.push("temporalWiggle("+f+","+a+")");    };}    return theExpression;}function createController(curComp, meta){    var ctrl = curComp.layers.addNull();    ctrl.name = meta.ctrlname;    ctrl.source.name = meta.ctrlname;var freq = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    freq.name = "freq";    freq.property("ADBE Slider Control-0001").setValue(meta.freq);var amp = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    amp.name = "amp";    try{    amp.property("ADBE Slider Control-0001").setValue(parseFloat (meta.amp));    }catch(e){        try{        amp.property("ADBE Slider Control-0001").expression = meta.amp;        amp.property("ADBE Slider Control-0001").expressionEnabled = true;        }catch(e){        amp.property("ADBE Slider Control-0001").expressionEnabled = false;        alert("The expression is not valid");        };    };var seed = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    seed.name = "seed";    seed.property("ADBE Slider Control-0001").setValue(meta.seed);var octaves = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    octaves.name = "octaves";    octaves.property("ADBE Slider Control-0001").setValue(meta.octaves);var amp_mult = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    amp_mult.name = "amp_mult";    amp_mult.property("ADBE Slider Control-0001").setValue(meta.amp_mult);var t = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    t.name = "t";    t.property("ADBE Slider Control-0001").setValue(meta.t);    if (meta.addTime){        try{                t.property("ADBE Slider Control-0001").expression = meta.time_expr;                t.property("ADBE Slider Control-0001").expressionEnabled = true;            }catch(e){                alert("Your time expression is not working.\n I will fall back to a basic 'time' as expression");                t.property("ADBE Slider Control-0001").expression = meta.default_time_expr;                t.property("ADBE Slider Control-0001").expressionEnabled = true;            };    };var framesPerSecond = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    framesPerSecond.name = "framesPerSecond";    framesPerSecond.property("ADBE Slider Control-0001").setValue(meta.framesPerSecond);var loopTime = ctrl("ADBE Effect Parade").addProperty("ADBE Slider Control");    loopTime.name = "loopTime";    loopTime.property("ADBE Slider Control-0001").setValue(meta.loopTime);};}